Assunto sobre variaveis e tipos primitivos;

tipos primitivos (number/string/boolean/obejct/null/undefined/function)
Use: typeof (para ver o tipo primitivo)

/////////////////////////////////////////////

Assunto tratamento de dados;

Number.parseInt(n) - {Usa para converter números inteiros, como o 7}

Number.parseFloat(n) - {Usa para converter números reais, como o 7.5}

Number(n) - {É uma simplifição de Number.parseInt() e Number.parseFloat()}

String(n) - {Usa para converter um número para string}

n.toString() - {Usa para converter um número para string}

s.length - {Usa para mostrar quantos caracteres tem a string}

s.toUpperCase() - {Usa para transformar a string em MAIÚSCULA}

s.toLowerCase() - {Usa para transformar a string em MINÚSCULA}

n.toFixed(2).replace('o que vai ser trocado', 'o que quer trocar') - {Formata o número para 2 casa decimais, o replace usa para formartar para o real brasileiro}

//////////////////////////////////////////////

Assunto Operadores;

Operadores aritméticos:
+ = adição
- = subtração
* = multiplicação
/ = divisão
% = resto da divisão inteira
** = potência/ao quadrado

Ordem de precedência:
()
**
* / % (aqui vai da esquerda pra direita)
+ -
> < >= <= == != === !==
!
&&
||

Operadores de atribuição:
n += 5
n -+ 5
n *= 5
n /= 5
n %= 5
n **= 5

Operadores de incremento:
n++ (pós incremento)
n-- (pós incremento)
++n (pré incremento)
--n (pré incremento)

Operadores relacionais:
> = maior
< = menor 
>= = maior ou igual
<= = menor ou igual
== = igual
!= = difente

Operadores de indentidade:
=== = tem que ser indêntico no valor e no tipo
!== = tem que ser desigual no valor e no tipo

Operadores lógicos:
! = negação/não
&& = conjução/e
|| = disjunção/ou

Ordem de execução:
!
&&
||

Operadores ternário:
o teste ? true : false

//////////////////////////////////////////////////////

Assunto sobre DOM;

innerText = (pega somente o texto, sem as tags que contem o mesmo;)

innerHTML = (pega tudo, incluindo as tags)

/////////////////////////////////////////////////////

Assunto sobre Condição;

Condição multipla (switch, sempre usar o break)

//////////////////////////////////////////////////////

Assunto sobre Repetições;

white(condição) {
    (o que vai aconter)     ==> (cuidado para não repetir infinitamente, usar sempre o elemento++)
    elemento++
}


do {
    (o que vai aconter)     ==> (mesmo sentido, só que primeiro vai exexutar o bloco e depois o teste)
    elemento++
} white(condição)


for (inicio[var c = 1]; condição[c <= 10]; incremento[c++]) {
    (o que vai aconter)                                           ==> (é o mais utilizado em grande parte dos projeto)
}

document.write() - {Usa para escrever na tela}


/////////////////////////////////////////////////////////

Assunto variaveis compostas;

var num = [1,4,5]

num[3] = 7 (vai adicionar ao array/vetor o sete na posição indicada, no caso a 3)

num.push(7) (Vai adicionar ao array/vetor o sete na ultima posição)

num.length (verifica o tamanho do array/vetor, começa a contar no 1)

num.sort() (vai ordenar os itens em ordem crescente)

for (let pos in num) {
    console.log(num[pos])  ==> (Esse for só funciona com arrays e objetos)
}

